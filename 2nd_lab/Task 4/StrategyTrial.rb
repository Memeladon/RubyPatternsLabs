'''
Шаблон "Стратегия" на языке Ruby представляет собой способ организации кода,
который позволяет определить семейство алгоритмов, инкапсулировать их и делать их взаимозаменяемыми.

Этот шаблон является полезным в тех случаях, когда в программе есть несколько различных реализаций алгоритма,
все они должны быть доступны, и выбор конкретной реализации не должен зависеть от ее клиентов.
Также "Стратегия" может использоваться для решения задач,
связанных с расширением функций программы без изменения ее существующей структуры.

Реализация паттерна "Стратегия" в ООП на языке Ruby означает:
'''

# 1. Создание базового класса, описывающего интерфейс для всех вариантов реализации алгоритма.
class BaseAlgorithm
  def execute
    raise NotImplementedError
  end
end

# 2. Создание дочерних классов, реализующих конкретные алгоритмы с помощью метода execute.
class ConcreteAlgorithmA < BaseAlgorithm
  def execute
    # реализация алгоритма A
  end
end

class ConcreteAlgorithmB < BaseAlgorithm
  def execute
    # реализация алгоритма B
  end
end

# 3. Создание класса, связывающего использующий алгоритм клиент и объект класса, инкапсулирующего выбранный алгоритм.
class Client
  def initialize(algorithm)
    @algorithm = algorithm
  end

  def execute
    @algorithm.execute
  end
end

# 4. Тестирование взаимодействия объектов в соответствии с выбранным алгоритмом.
algorithm_a = ConcreteAlgorithmA.new
algorithm_b = ConcreteAlgorithmB.new

client_a = Client.new(algorithm_a)
client_a.execute #=> запуск алгоритма A

client_b = Client.new(algorithm_b)
client_b.execute #=> запуск алгоритма B

'''
Таким образом, "Стратегия" позволяет выбирать различные действия для решения похожих задач
в зависимости от конкретных требований.
'''